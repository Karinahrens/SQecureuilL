const fakePosts = [
    {
        title: "Graffiti on School Wall",
        content: "Last night, some miscreants drew graffiti on our local school wall. It's inappropriate and sets a wrong example for the kids.",
        category: "graffiti",
        completionStatus: "pending",
        date: "2023-09-15",
        votes: 12
    },
    {
        title: "Fly Tipping at Elm Street",
        content: "Someone dumped a lot of household waste on Elm Street. It's now causing a blockage and smells terrible.",
        category: "fly-tipping",
        completionStatus: "done",
        date: "2023-09-10",
        votes: 20
    },
    {
        title: "Loud Parties at Pine Avenue",
        content: "There have been nightly parties at Pine Avenue, disturbing the elderly in our neighborhood.",
        category: "noise-disturbance",
        completionStatus: "pending",
        date: "2023-09-01",
        votes: 8
    },
    {
        title: "Group causing trouble at the park",
        content: "A group of teenagers are frequently causing disturbances at the local park, making it hard for families to enjoy.",
        category: "anti-social-behaviour",
        completionStatus: "in-progress",
        date: "2023-08-20",
        votes: 15
    },
    {
        title: "Main Street Needs Cleaning",
        content: "Main Street has a lot of litter and it's been weeks since it was last cleaned.",
        category: "street-sweeping",
        completionStatus: "pending",
        date: "2023-09-11",
        votes: 9
    },
    {
        title: "Dangerous Pothole near Mall",
        content: "A huge pothole near the shopping mall entrance has damaged several vehicles. Immediate attention needed!",
        category: "potholes",
        completionStatus: "done",
        date: "2023-07-30",
        votes: 25
    },
    {
        title: "Illegal Parking at Rose Lane",
        content: "Every evening, vehicles are parked illegally at Rose Lane blocking the residents' driveways.",
        category: "parking",
        completionStatus: "in-progress",
        date: "2023-09-05",
        votes: 10
    },
    {
        title: "Vandalized Benches at Park",
        content: "The benches at the city park were recently vandalized and need urgent repair.",
        category: "damaged-property",
        completionStatus: "pending",
        date: "2023-08-18",
        votes: 6
    },
    {
        title: "Noise from Construction Site",
        content: "The construction site near Maple Street is causing noise disturbances during odd hours.",
        category: "noise-disturbance",
        completionStatus: "in-progress",
        date: "2023-09-03",
        votes: 7
    },
    {
        title: "Overflowing Bins on Cherry Avenue",
        content: "The bins on Cherry Avenue are overflowing and haven't been cleared for days.",
        category: "street-sweeping",
        completionStatus: "done",
        date: "2023-09-12",
        votes: 11
    }
];


<routers>
postsRouter.get("/order", postsController.orderBy);
<model>
static async getPostsByCategoryAndSort(Category, sortCriteria) {
        let orderByClause;
        switch (sortCriteria) {
            case "date":
                orderByClause = "ORDER BY post_date";
                break;
            case "votes":
                orderByClause = "ORDER BY post_votes DESC";
                break;
            case "status":
                orderByClause = "ORDER BY post_status";
                break;
            default:
                orderByClause = ""; // default behavior if no valid sortCriteria is passed
        }
        const queryStr = `SELECT * FROM post WHERE LOWER(post_categories) = LOWER($1) ${orderByClause}`;
        const response = await db.query(queryStr, [Category]);
        return response.rows.map(p => new Post(p));
    }
    <controller>
async function orderBy(req, res) {
    try {
        const category = req.query.category;
        const sort = req.query.sort;
        
        const posts = await Post.getPostsByCategoryAndSort(category, sort);
        
        res.status(200).json(posts);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
}

<script>
function applyFilter() {
        const category = categoryFilter.value;
        const sortOrder = document.querySelector('[name="sort-order"]:checked').value;
    
        let endpoint = `${API_ENDPOINT}posts`; // default
    
        if (category !== 'all') {
            endpoint = `${API_ENDPOINT}posts/order?category=${category}&sort=${sortOrder}`;
        } else {
            endpoint = `${API_ENDPOINT}posts/${sortOrder}`
        }
    
        fetchAndDisplay(endpoint);
    }
